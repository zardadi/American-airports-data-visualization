# removing negative arrivals
top10 <- top10[top10$ArrDelay > 5,]
bwplot(ArrDelay~Dest, data = top10)
?bwplot
xyplot(ArrDelay~Month|Dest, data=top10, pch=16, col=1, ylim = (0,250))
xyplot(ArrDelay~Month|Dest, data=top10, pch=16, col=1, ylim = 250)
xyplot(ArrDelay~Month|Dest, data=top10, pch=16, col=1, ylim = c(0,250))
bwplot(ArrDelay~Dest, data = top10, ylim=c(0,250))
# top 5 busiest airports:
topAirports <- Airports[1:5,][1]
top5 <- subset(airdf, Dest %in% topAirports$Dest)
head(top5)
max(top5$ArrDelay)
# removing negative arrivals
top5 <- top5[top5$ArrDelay > 5,]
# Arrdelay box plot for top 10 airports
bwplot(ArrDelay~Dest, data = top5, ylim=c(0,250))
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
xyplot(ArrDelay~Month|Dest, data=top5, pch=16, col=1, ylim = c(0,250))
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
x11()
xyplot(ArrDelay~Month|Dest, data=top5, do.out = FALSE)
bwplot(ArrDelay~Month|Dest, data=top5, do.out = FALSE)
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
x11()
bwplot(ArrDelay~Month|Dest, data=top5, do.out = FALSE)
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
x11()
bwplot(ArrDelay~Month|Dest, data=top5, do.out = FALSE)
bwplot(ArrDelay~Month|Dest, data=top5, do.out = FALSE)
# Arrdelay box plot for top 10 airports
bwplot(ArrDelay~Dest, data = top5, ylim=c(0,250))
# top 5 busiest airports:
topAirports <- Airports[1:1,][1]
top5 <- subset(airdf, Dest %in% topAirports$Dest)
head(top5)
max(top5$ArrDelay)
# removing negative arrivals
top5 <- top5[top5$ArrDelay > 5,]
# Arrdelay box plot for top 10 airports
bwplot(ArrDelay~Month, data = top5, ylim=c(0,250))
5
5
# top 5 busiest airports:
topAirports <- Airports[1:5,][1]
top5 <- subset(airdf, Dest %in% topAirports$Dest)
head(top5)
unique(top5$Dest)
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
ord <- subset(top5, top5$Dest = 'ORD')
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
ord <- subset(top5, Dest = 'ORD')
head(ord)
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
ord <- subset(top5, Dest == 'ORD')
head(ord)
nrow(ord)
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
ord <- subset(top5, Dest == 'ORD')
head(ord)
bwplot(ArrDelay~Month, data=ord, do.out = FALSE)
boxplot(ArrDelay~Month, data =ord)
# top 5 busiest airports:
topAirports <- Airports[1:5,][1]
top5 <- subset(airdf, Dest %in% topAirports$Dest)
head(top5)
# removing negative arrivals
top5 <- top5[top5$ArrDelay > 5,]
# Arrdelay box plot for top 5 airports
bwplot(ArrDelay~Dest, data = top5, ylim=c(0,250))
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
ord <- subset(top5, Dest == 'ORD')
bwplot(ArrDelay~Month, data=ord, do.out = FALSE)
bwplot(ArrDelay~Month, data=ord, ylim = c(0,200))
boxplot(ArrDelay~Month, data =ord)
min(ord$ArrDelay)
boxplot(ArrDelay~Month, data =ord, ylim = c(0,300))
bwplot(ArrDelay~Month, data=ord, ylim = c(0,300))
load("D:/R-files/data550/miniposter/.RData")
############################################# data wrangling ##############################################################
###########################################################################################################################
library(dplyr)
# replace all the empty vlaues with 'Null'
air[air==""] <- NA
# checking null values
sapply(air,function(x) sum(is.na(x)))
# drop columns which are non-relevent or have the most missing values
drop <- c('DepTime', 'ArrTime', 'ActualElapsedTime', 'CRSElapsedTime','AirTime',
'TaxiIn','TaxiOut','LateAircraftDelay', 'SecurityDelay', 'NASDelay',
'WeatherDelay', 'CarrierDelay','TailNum', 'CancellationCode')
airdf <- air[,!(names(air)%in%drop)]
# checking missing values in the  sub-set
sapply(airdf, function(x) sum(is.na(x)))
# removing all rows with null values.
# (we may replace null values with some specific values)
airdf <- na.omit(airdf)
sapply(airdf, function(x) sum(is.na(x)))
# explor the data
sapply(airdf, function(x) length(unique(x)))
# Finding all the Airports in the data set and sort them by most arrivals
Airports <- airdf %>% group_by(Dest) %>% count(Dest)
Airports <- Airports[order(-Airports$n),]
# Number of airports in the data set
nrow(Airports)
# 30 most busiest airports by arrivals
head(Airports[1],30)
# select top 10 busiest airports
topAirports <- Airports[1:10,][1]
topAirports
top10 <- subset(airdf, Dest %in% topAirports$Dest)
library(lattice)
# top 5 busiest airports:
topAirports <- Airports[1:5,][1]
top5 <- subset(airdf, Dest %in% topAirports$Dest)
head(top5)
# removing negative arrivals
top5 <- top5[top5$ArrDelay > 5,]
# It seems ORD(Chicago airport) is the worst airport based on Arrival delay
ord <- subset(top5, Dest == 'ORD')
head(ord)
x11()
bwplot(ArrDelay~Month, data=ord, ylim = c(0,300))
boxplot(ArrDelay~Month, data =ord, ylim = c(0,300))
str(ord)
ord$Month <- as.factor(ord$Month)
bwplot(ArrDelay~Month, data=ord, ylim = c(0,300))
bwplot(ArrDelay~Month, data=ord, ylim = c(0,300))
boxplot(ArrDelay~Month, data =ord, ylim = c(0,300))
# removing negative arrivals
top10 <- top10[top10$ArrDelay > 5,]
# Arrdelay box plot for top 10 airports
bwplot(ArrDelay~Dest, data = top10, ylim=c(0,250))
bwplot(ArrDelay~Month | Dest, data=top5, ylim = c(0,300))
top5$Month <- as.factor(top5$Month)
x11()
bwplot(ArrDelay~Month | Dest, data=top5, ylim = c(0,300))
# not much we can see.
# Let's do four seasons analysis
season <- list('spring' = 3:5 , 'summer' = 6:8, 'fall'= 9:11 , 'winter' = c(1,2,12))
top5$season <- ifelse(top5$Month %in% season$fall, "fall",
ifelse(top5$Month %in% season$winter, "winter",
ifelse(top5$Month %in% season$spring, "spring", "summer")))
x11()
bwplot(ArrDelay~season | Dest, data=top5, ylim = c(0,300))
bwplot(ArrDelay~season | Dest, data=top5, ylim = c(0,200))
x11()
bwplot(ArrDelay~season | Dest, data=top5, ylim = c(0,200))
head(top5)
# let's see if there is any daily affect.
x11()
bwplot(ArrDelay~DayOfWeek | Dest, data=top5, ylim = c(0,200))
# let's see if there is any daily effect.
top5$DayOfWeek <- as.factor(top5$DayOfWeek)
x11()
bwplot(ArrDelay~DayOfWeek | Dest, data=top5, ylim = c(0,200))
# select top 10 busiest airports
topAirports <- Airports[1:10,][1]
topAirports
top10 <- subset(airdf, Dest %in% topAirports$Dest)
# removing negative arrivals
top10 <- top10[top10$ArrDelay > 5,]
# Arrdelay box plot for top 10 airports
bwplot(ArrDelay~Dest, data = top10, ylim=c(0,250))
# we can see Fall has the lowest delays compare to the other seasons.
# Repeat the same analysis for top 10 airports
top10$season <- ifelse(top10$Month %in% season$fall, "fall",
ifelse(top10$Month %in% season$winter, "winter",
ifelse(top10$Month %in% season$spring, "spring", "summer")))
top10 <- as.factor(top10$Month)
x11()
bwplot(ArrDelay~Month | Dest, data=top10, ylim = c(0,300))
top10$Month <- as.factor(top10$Month)
top10 <- subset(airdf, Dest %in% topAirports$Dest)
# removing negative arrivals
top10 <- top10[top10$ArrDelay > 5,]
# Repeat the same analysis for top 10 airports
top10$season <- ifelse(top10$Month %in% season$fall, "fall",
ifelse(top10$Month %in% season$winter, "winter",
ifelse(top10$Month %in% season$spring, "spring", "summer")))
top10$Month <- as.factor(top10$Month)
x11()
bwplot(ArrDelay~Month | Dest, data=top10, ylim = c(0,300))
bwplot(ArrDelay~season | Dest, data=top10, ylim = c(0,200))
# let's see if there is any daily effect.
top10$DayOfWeek <- as.factor(top10$DayOfWeek)
x11()
bwplot(ArrDelay~DayOfWeek | Dest, data=top10, ylim = c(0,200))
xyplot(ArrDelay~Month | Dest, data=top10, ylim = c(0,300))
head(airdf)
################################################################################################################################
################################################################################################################################
# checking airlines
airlines <- airdf %>% group_by(UniqueCarrier) %>% count(UniqueCarrier)
# Number of airports in the data set
nrow(Airports)
# Number of airports in the data set
nrow(airlines)
################################################################################################################################
################################################################################################################################
# checking airlines
airlines <- airdf %>% group_by(UniqueCarrier) %>% count(UniqueCarrier)
airlines <- airlines[order(-airlines$n),]
# Number of airports in the data set
nrow(airlines)
airlines
# select top 10 busiest airlines
topAirlines <- airlines[1:10,][1]
topAirlines
# select top 10 busiest airlines
topAirlines <- airlines[1:10,]
topAirlines
top10 <- subset(airdf, UniqueCarrier %in% topAirlines$UniqueCarrier)
head(top10)
# removing negative arrivals
top10 <- top10[top10$ArrDelay > 5,]
# removing arrival delays less than 5 minutes
top10 <- top10[top10$ArrDelay > 5,]
# Arrdelay box plot for top 10 airports
bwplot(ArrDelay~UniqueCarrier, data = top10, ylim=c(0,250))
top10$Month <- as.factor(top10$Month)
x11()
bwplot(ArrDelay~Month | UniqueCarrier, data=top10, ylim = c(0,300))
library(MASS)
cars <- read.csv('car93.csv')
summary(cars)
head(cars)
# remove non-numeric data
car <- cars[-1:-3]
head(car)
pcacar <- prcomp(car[-1], scale. = TRUE)
# plot eign values
plot(pcacar, type = "lines")
round(pcacar$rotation[,1:3],2)
summary(pcacar)
pcacar$scale
pcacar$rotation
pcacar$center
pcacar$x
pcacar$sdev
ev <- pcacar$sdev^2
ev
summary(pcacar)
plot(pcacar, type = "lines")
head(cars)
row.names(cars)
head(cars)
pcacar$x
nrow(pcacar)
nrow(pcacar$x)
nrow(cars)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
head(pcamodel)
nrow(pcamodel)
head(pcamodel)
pcamodel$Type <- ifelse(pcamodel$Type == 'Small', 'Small', 'Not Small' )
head(pcamodel)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
head(pcamodel)
pcamodel$Type <- ifelse(pcamodel$Type == 'Small', 'Small', 'Not Small' )
head(pcamodel)
# now data set is ready for Logistic Regression
library(glmnet)
y <- pcamodel$Type
x <- as.matrix(pcamodel[-3])
carLR <- cv.glmnet(x, y, alpha = 1, family="binomial")
carLR
carLR <- cv.glmnet(x, y, alpha = 1, family="binomial")
carLogR <- cv.glmnet(x, y, alpha = 1, family="binomial")
plot(carLogR)
table(y, predict(carLogR))
table(y, predict(carLogR, newx=x))
table(y, predict(carLogR, newx=x, type="class"))
carLogR$lambda.min
table(y, predict(carLogR, newx=x, s=carLogR$lambda.min, type="class"))
table(y, predict(carLogR, newx=x, s=carLogR$lambda.1se, type="class"))
table(y, predict(carLogR, newx=x, s=carLogR$lambda.min, type="class"))
lambdamin <- carLogR$lambda.min
LRmin <- glmnet(x,y,alpha = 1, lambda=lambdamin, family = "binomial")
coef(LRmin)
table(y, predict(LRmin, newx=x, s=lambdamin, type="class"))
predict(LRmin, newx=x, s=lambdamin, type="class")
LogLoss(predict(LRmin, newx=x, s=lambdamin, type="class"), pcamodel$Type)
library(MLmetrics)
LogLoss(predict(LRmin, newx=x, s=lambdamin, type="class"), pcamodel$Type)
LRmin
LRmin <- glmnet(x,y,alpha = 1, lambda=lambdamin, family = "binomial")
table(y, predict(LRmin, newx=x, s=lambdamin, type="class"))
LRmin
LRmin$call
LRmin$nobs
LRmin$nobs
LRmin$a0
LRmin$beta
LRmin$df
LRmin$dim
as.numeric(pcamodel$Type)
as.numeric(pcamodel$Type)-1
predict(LRmin, newx=x, s=lambdamin, type="class")
pcamodel$Type
LogLoss(predict(LRmin, newx=x, s=lambdamin, type="class"), pcamodel$Type)
?logloss
## ------------------------------------------------------------------------
load("~/Downloads/golub.RData")
LogLoss(y_pred = predict(LRmin, newx=x, s=lambdamin, type="class"), y_true = pcamodel$Type)
levels(pcamodel$Type)
pcamodel <- as.data.frame(pcamodel)
levels(pcamodel$Type)
class(pcamodel)
str(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
str(pcamodel)
LogLoss(predict(LRmin, newx=x, s=lambdamin, type="class"), pcamodel$Type)
LogLoss(y_pred = predict(LRmin, newx=x, s=lambdamin, type="class"), y_true = pcamodel$Type)
as.numeric(pcamodel$Type)
LogLoss(predict(LRmin, newx=x, s=lambdamin, type="class"), as.numeric(pcamodel$Type))
LogLoss(predict(LRmin, newx=x, s=lambdamin, type="class"), as.numeric(pcamodel$Type)-1)
predict(LRmin, newx=x, s=lambdamin, type="class")
pre <- predict(LRmin, newx=x, s=lambdamin, type="class")
LogLoss(pre, as.numeric(pcamodel$Type)-1)
LogLoss(as.numeric(pre), as.numeric(pcamodel$Type)-1)
as.numeric(pre)
pre <- as.factor(pre)
LogLoss(as.numeric(pre), as.numeric(pcamodel$Type)-1)
as.numeric(pre)
as.numeric(pcamodel$Type)
LogLoss(as.numeric(pre), as.numeric(pcamodel$Type))
LogLoss(as.numeric(pre)-1, as.numeric(pcamodel$Type)-1)
as.numeric(pre)-1
as.numeric(pcamodel$Type)-1
ldacar <- lda(Type~.,data(pcamodel))
library(MASS)
ldacar <- lda(Type~.,data =pcamodel)
ldacar$prior
pcamodel$Type
table(pcamodel$Type, ldacar$class)
ldacar$class
ldacar <- lda(Type~.,data =pcamodel, CV=TRUE)
table(pcamodel$Type, ldacar$class)
ldacar$posterior[,2]
LogLoss(ldacar$posterior[,2], as.numeric(pcamodel$Type))
LogLoss(ldacar$posterior[,2], as.numeric(pcamodel$Type)-1)
head(cars)
row.names(cars)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
head(pcamodel)
pcamodel$Type <- ifelse(pcamodel$Type == 'Small', 'Small', 'Not Small' )
head(pcamodel)
# now data set is ready for Logistic Regression
library(glmnet)
pcamodel <- as.data.frame(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
y <- pcamodel$Type
x <- as.matrix(pcamodel[-3])
carLogR <- cv.glmnet(x, y, alpha = 1, family="binomial")
plot(carLogR)
lambdamin <- carLogR$lambda.min
LRmin <- glmnet(x,y,alpha = 1, lambda=lambdamin, family = "binomial")
coef(LRmin)
table(y, predict(LRmin, newx=x, s=lambdamin, type="class"))
library(MLmetrics)
levels(pcamodel$Type)
pre <- predict(LRmin, newx=x, s=lambdamin, type="class")
pre <- as.factor(pre)
LogLoss(as.numeric(pre)-1, as.numeric(pcamodel$Type)-1)
as.numeric(pcamodel$Type)-1
ldacar$posterior[,2]
library(MASS)
ldacar <- lda(Type~.,data =pcamodel, CV=TRUE)
table(pcamodel$Type, ldacar$class)
LogLoss(ldacar$posterior[,2], as.numeric(pcamodel$Type)-1)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
pcamodel <- as.data.frame(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
ldacar2 <- lda(Type ~ ., data = pcamodel, CV=TRUE)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
pcamodel <- as.data.frame(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
ldacar2 <- lda(Type ~ ., data = pcamodel, CV=TRUE)
table(pcamodel$Type, ldacar$class)
LogLoss(ldacar$posterior[,2], as.numeric(pcamodel$Type)-1)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
pcamodel <- as.data.frame(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
ldacar2 <- lda(Type ~ ., data = pcamodel, CV=TRUE)
table(pcamodel$Type, ldacar2$class)
LogLoss(ldacar2$posterior[,2], as.numeric(pcamodel$Type)-1)
as.numeric(pcamodel$Type)-1
as.numeric(pcamodel$Type)
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
pcamodel <- as.data.frame(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
ldacar2 <- lda(Type ~ ., data = pcamodel, CV=TRUE)
table(pcamodel$Type, ldacar2$class)
LogLoss(ldacar2$posterior[,2], as.numeric(pcamodel$Type))
as.numeric(pcamodel$Type)
ldacar2$posterior[,2]
pcamodel <- cbind(pcacar$x[,1:2],cars[3] )
pcamodel <- as.data.frame(pcamodel)
pcamodel$Type <- as.factor(pcamodel$Type)
ldacar2 <- lda(Type ~ ., data = pcamodel, CV=TRUE)
table(pcamodel$Type, ldacar2$class)
LogLoss(ldacar2$posterior[,2], as.numeric(pcamodel$Type))
head(cars)
head(cars)
head(cars)
scar <- apply(cars[,-1:3], 2, function(v) (v-min(v))/(max(v)-min(v)))
drop <- c('Manufacturer', 'Model', 'Type')
car_numeric <- cars[,-(drop)]
car_numeric <- cars[,!(drop)]
car_numeric <- cars[,!(names(cars) %in% drop)]
head(car_numeric)
drop <- c('Manufacturer', 'Model', 'Type', "Price")
car_numeric <- cars[,!(names(cars) %in% drop)]
head(car_numeric)
scar <- apply(car_numeric, 2, function(v) (v-min(v))/(max(v)-min(v)))
scar$Price <- cars$Price
head(scar)
drop <- c('Manufacturer', 'Model', 'Type')
car_numeric <- cars[,!(names(cars) %in% drop)]
head(car_numeric)
scar <- apply(car_numeric[-1], 2, function(v) (v-min(v))/(max(v)-min(v)))
head(scar)
scar <- cbind(scar,cars$Price)
head(scar)
set.seed(4521)
library(nnet)
head(cars)
drop <- c('Manufacturer', 'Model', 'Type')
car_numeric <- cars[,!(names(cars) %in% drop)]
head(car_numeric)
scar <- apply(car_numeric[-1], 2, function(v) (v-min(v))/(max(v)-min(v)))
scar <- cbind(scar,cars$Price)
scar
head(scar)
scar <- apply(car_numeric[-1], 2, function(v) (v-min(v))/(max(v)-min(v)))
scar$Price <- cars$Price
scar <- apply(car_numeric[-1], 2, function(v) (v-min(v))/(max(v)-min(v)))
class(scar)
scar <- as.data.frame(scar)
scar$Price <- cars$Price
head(scar)
?nnet
nnbod2 <- nnet(Price~., data=scar, size=5)
table(scar$Price, predict(nncar, type="class"))
nncar <- nnet(Price~., data=scar, size=5)
table(scar$Price, predict(nncar, type="class"))
library(NeuralNetTools)
library(NeuralNetTools)
plotnet(nnbod2)
data(cars)
plot(cars)
nn <- neuralnet(dist~speed, data=cars, hidden=0)
plot(nn)
attach(cars)
carlm <- lm(dist~speed, data=cars)
nn <- neuralnet(dist~speed, data=cars, hidden=0)
plot(nn)
## ------------------------------------------------------------------------
#install.packages("neuralnet")
library(neuralnet)
nn <- neuralnet(dist~speed, data=cars, hidden=0)
plot(nn)
sum((compute(nn, speed)$net.result-dist)^2)
carlm <- lm(dist~speed, data=cars)
sum(carlm$residuals^2)
plotnet(nncar)
head(cars)
cars <- read.csv('car93.csv')
head(cars)
library(neuralnet)
head(cars)
drop <- c('Manufacturer', 'Model', 'Type')
car_numeric <- cars[,!(names(cars) %in% drop)]
head(car_numeric)
scar <- apply(car_numeric[-1], 2, function(v) (v-min(v))/(max(v)-min(v)))
scar <- as.data.frame(scar)
scar$Price <- cars$Price
nncar <- nnet(Price~., data=scar, size=5)
plotnet(nncar)
table(scar$Price, predict(nncar, type="class"))
predict(nncar, type="class")
sum((compute(nncar, scar[,-1])$net.result-scar$Price)^2)
scar[,-1]
head(scar)
sum((compute(nncar, scar[,-15])$net.result-scar$Price)^2)
scar$Price
table(scar[,15], predict(nncar, type="class"))
predict(nncar, type="class")
calss(nncar)
class(nncar)
str(nncar)
table(scar[,15], predict(nncar))
table(scar[,15], predict(nncar))
set.seed(4521)
library(neuralnet)
head(cars)
drop <- c('Manufacturer', 'Model', 'Type')
car_numeric <- cars[,!(names(cars) %in% drop)]
head(car_numeric)
scar <- apply(car_numeric[-1], 2, function(v) (v-min(v))/(max(v)-min(v)))
scar <- as.data.frame(scar)
scar$Price <- cars$Price
nncar <- nnet(Price~., data=scar, size=5)
table(scar[,15], predict(nncar))
library(NeuralNetTools)
setwd("D:/data550-Data_Visualization_I/American-airports-data-visualization")
runApp("ORD")
library(shiny)
runApp("ORD")
runApp("ORD")
runApp("ORD")
runApp("ORD")
